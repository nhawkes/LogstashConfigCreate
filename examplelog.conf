#########################################################################################################################################
###This config file was generated by a cli
###
###It follows this structure:
###    
###    {{...}}
###        ->\[%{NUMBER:timestamp}\] {{...}}    [100.0%]
###        Set timestamp from timestamp
###            ->PROCESS_SERVICE_CHECK_RESULT: SWAP %{NUMBER:free_swap}% free \(out of %{NUMBER:total_mem} MB\)  (process_check_result)    [20.0%]
###            Convert type(s): total_mem, free_swap
###            ->PASSIVE SERVICE CHECK: %{HOSTNAME:hostname};All_OK  (service_check)    [20.0%]
###            ->CURRENT HOST STATE: %{HOSTNAME:hostname};{{...}}  (host_state)    [60.0%]
###                ->UP;HARD;1;PING OK - Packet loss = %{NUMBER:packet_loss}%, RTA = %{NUMBER:rta} ms  (host_up)    [40.0%]
###                  IGNORE MESSAGE
###                ->DOWN;HARD;1;CRITICAL - Host Unreachable \(%{IP:ip}\)  (host_down)    [20.0%]
###    
##################################################################################################################

input {
    file{ 
        path => '/home/nathan/LogstashConfigCreate/example.log'
        start_position => 'beginning'
    }
}

filter {
    grok {
        match => {
            "message" => "\[%{NUMBER:timestamp}\] %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
    }
    date {
        match => [ "timestamp", "UNIX"]
        remove_field => [ "timestamp" ]
    }
    grok {
        match => {
            "message" => "PROCESS_SERVICE_CHECK_RESULT: SWAP %{NUMBER:free_swap}% free \(out of %{NUMBER:total_mem} MB\)"
        }
        remove_field => [ "message" ]
        add_tag => ["process_check_result"]
        tag_on_failure => []
    }
    mutate {
        convert => [ "total_mem", "integer"]
        convert => [ "free_swap", "integer"]
    }
    grok {
        match => {
            "message" => "PASSIVE SERVICE CHECK: %{HOSTNAME:hostname};All_OK"
        }
        remove_field => [ "message" ]
        add_tag => ["service_check"]
        tag_on_failure => []
    }
    grok {
        match => {
            "message" => "CURRENT HOST STATE: %{HOSTNAME:hostname};%{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
        add_tag => ["host_state"]
        tag_on_failure => []
    }
    if ("host_state" in [tags]){
        grok {
            match => {
                "message" => "UP;HARD;1;PING OK - Packet loss = %{NUMBER:packet_loss}%, RTA = %{NUMBER:rta} ms"
            }
            remove_field => [ "message" ]
            add_tag => ["host_up"]
            remove_tag => ["host_state"]
            tag_on_failure => []
        }
        if ("host_up" in [tags]){
           drop {}
        }
        grok {
            match => {
                "message" => "DOWN;HARD;1;CRITICAL - Host Unreachable \(%{IP:ip}\)"
            }
            remove_field => [ "message" ]
            add_tag => ["host_down"]
            remove_tag => ["host_state"]
            tag_on_failure => []
        }
    }
}

output {
    stdout {
        codec => 'rubydebug'
    }
}
